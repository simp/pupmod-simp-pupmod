# This file managed by Puppet
# Any changes will be removed on the next run

# configuration for the JRuby interpreters
jruby-puppet: {
    # Where the puppet-agent dependency places puppet, facter, etc...
    # Puppet server expects to load Puppet from this location
    ruby-load-path: [/opt/puppetlabs/puppet/lib/ruby/vendor_ruby]

    # This setting determines where JRuby will look for gems.  It is also
    # used by the `puppetserver gem` command line tool.
    gem-home: /opt/puppetlabs/server/data/puppetserver/jruby-gems

    # PLEASE NOTE: Use caution when modifying the below settings. Modifying
    # these settings will change the value of the corresponding Puppet settings
    # for Puppet Server, but not for the Puppet CLI tools. This likely will not
    # be a problem with master-var-dir, master-run-dir, or master-log-dir unless
    # some critical setting in puppet.conf is interpolating the value of one
    # of the corresponding settings, but it is important that any changes made to
    # master-conf-dir and master-code-dir are also made to the corresponding Puppet
    # settings when running the Puppet CLI tools. See
    # https://docs.puppetlabs.com/puppetserver/latest/puppet_conf_setting_diffs.html#overriding-puppet-settings-in-puppet-server
    # for more information.

    # (optional) path to puppet conf dir; if not specified, will use the puppet default
    master-conf-dir: <%= $pupmod::master::puppet_confdir %>

    # (optional) path to puppet code dir; if not specified, will use
    # /etc/puppetlabs/code
    master-code-dir: <%= $pupmod::master::codedir %>

    # (optional) path to puppet run dir; if not specified, will use
    # /var/run/puppetlabs/puppetserver
    master-run-dir: <%= $pupmod::master::rundir %>

    # (optional) path to puppet log dir; if not specified, will use
    # /var/log/puppetlabs/puppetserver
    master-log-dir: <%= $pupmod::master::logdir %>

    # (optional) path to puppet var dir; if not specified, will use the puppet default
    master-var-dir: <%= $pupmod::master::vardir %>

    # (optional) maximum number of JRuby instances to allow
    max-active-instances: <%= $pupmod::master::max_active_instances %>

    # (optional) maximum number of HTTP requests a given JRuby instance will
    # handle in its lifetime
    max-requests-per-instance: <%= $pupmod::master::max_requests_per_instance %>

    # (optional) timeout in milliseconds when attempting to borrow an instance
    # from the JRuby pool
    borrow-timeout: <%= $pupmod::master::borrow_timeout %>

    # (optional) control whether the master service maintains a cache in
    # conjunction with the use of the `environment_classes` API
    environment-class-cache-enabled: <%= $pupmod::master::environment_class_cache_enabled %>

<%  if versioncmp($pupmod::master::_server_version, '5.1.0') < 0 { -%>
<%  if $pupmod::master::compat_version { -%>
    # (optional) EXPERIMENTAL - the MRI compatibility version under which JRuby runs
    compat-version: <%= $pupmod::master::compat_version %>

<%  } -%>
<% } -%>
    # (optional) EXPERIMENTAL - Set the compile mode for JRuby
    compile-mode: <%= $pupmod::master::compile_mode %>

    # (optional) Authorize access to Puppet master endpoints via rules specified
    # in the legacy Puppet auth.conf file (if true or not specified) or via rules
    # specified in the Puppet Server HOCON-formatted auth.conf (if false).
    use-legacy-auth-conf: <%= $pupmod::master::use_legacy_auth_conf %>
<%  if versioncmp($pupmod::master::_server_version, '5.1.0') >= 0 { -%>

    # (optional) maximum number of requests that may be queued waiting to
    # borrow a JRuby from the pool. Once this limit is exceeded, a 503 “Service
    # Unavailable” response will be returned for all new requests until the
    # queue drops below the limit. If max-retry-delay is set to a positive
    # value, then the 503 responses will include a Retry-After header
    # indicating a random sleep time after which the client may retry the
    # request.
    max-queued-requests: <%= $pupmod::master::max_queued_requests %>

    # (optional) the upper limit for the random sleep set as a Retry-After
    # header on 503 responses returned when max-queued-requests is enabled. A
    # value of 0 will cause the Retry-After header to be omitted.
    max-retry-delay: <%= $pupmod::master::max_retry_delay %>

    # (optional) enable JRuby’s profiler and set it to one of the supported
    # modes. The default value is off, but it can be set to one of api, flat,
    # graph, html, json, off, and service. See ruby-prof for details on what
    # the various modes do.
    profiling-mode: <%= $pupmod::master::profiling_mode %>

    # (optional) set the output file to direct JRuby profiler output. Should be
    # a fully qualified path writable by the service user. If not set will
    # default to a random name inside the service working directory.
    profiling-output-file: <%= $pupmod::master::profiling_output_file %>
<% } -%>
}

# settings related to HTTP client requests made by Puppet Server
http-client: {
<% if !empty($pupmod::master::ssl_protocols) { -%>
    # A list of acceptable protocols for making HTTP requests
    ssl-protocols: [<%= join($pupmod::master::ssl_protocols, ',') %>]
<% } -%>
<% if $pupmod::master::ssl_cipher_suites { -%>
    # A list of acceptable cipher suites for making HTTP requests
    cipher-suites: [<%= join($pupmod::master::ssl_cipher_suites, ',') %>]
<% } -%>
}

# settings related to profiling the puppet Ruby code
profiler: {
    # enable or disable profiling for the Ruby code; defaults to 'false'.
    enabled: <%= $pupmod::master::enable_profiler %>
}

# Settings related to the puppet-admin HTTP API
puppet-admin: {
    client-whitelist: [<%= join($pupmod::master::admin_api_whitelist, ',') %>]
}
