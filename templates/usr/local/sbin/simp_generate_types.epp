#!/opt/puppetlabs/puppet/bin/ruby

require 'ostruct'
require 'optparse'
require 'pathname'

PUPPET_CMD = '/opt/puppetlabs/bin/puppet'
GENERATE_LOCK = '/var/run/simp_generate_types.generatelock'

options = OpenStruct.new
options.paths   = []
options.batch   = false
options.quiet   = false
options.syslog  = false
options.timeout = 300
options.force   = false

OptionParser.new do |opts|
  opts.on('-p', '--path TARGET',
    'Pass a full path to process the environment at that path.',
    'Pass an environment short name to process matching environments in all environment paths.',
    'Specify more than one path using comma separation'
  ) do |path|
    options.paths = path.split(',').map(&:strip)
  end
  opts.on('-a', '--all', 'Process all paths. Takes precedence over "-p"') do
    options.paths = ['ALL']
  end
  opts.on('-b', '--batch', 'Run in batch mode - No human-useful messages will be output') do
    options.batch = true
  end
  opts.on('-f', '--force', 'Force creation regardless of the state of the .resource_types directory in the environment') do
    options.force = true
  end
  opts.on('-i', '--stability_timeout TIMEOUT', 'Seconds to wait before considering the target environment paths to unstable to process') do |tmout|
    options.stability_timeout = tmout.to_i
  end
  opts.on('-l', '--logfile LOGFILE', 'Output to this logfile') do |file|
    options.logfile = file
  end
  opts.on('-q', '--quiet', 'No terminal output') do
    options.quiet = true
    options.batch = true
  end
  opts.on('-s', '--syslog', 'Write to syslog') do
    require 'syslog/logger'

    options.syslog = Syslog::Logger.new(File.basename(__FILE__))
  end
  opts.on('-t', '--timeout TIMEOUT',
          'Seconds to wait for a current run to complete before force-unlocking and continuing.',
          '  * Default: 300',
          '  * Minimum: 5'
         ) do |tmout|
    options.timeout = [5, tmout.to_i].max
  end
  opts.on('-h', '--help', 'This help message') do
    puts opts
    exit
  end

  options.help = opts.help
end.parse!

options.stability_timeout ||= options.timeout

def lock(lockfile)
  locked = false

  # From the API documentation for File/flock as the safe method for write
  # locking
  fh = File.open(lockfile, File::RDWR|File::CREAT, 0640)

  locked = fh.flock(File::LOCK_NB|File::LOCK_EX)
  if locked
    fh.rewind

    fh.puts(Process.pid)

    fh.flush
    fh.truncate(fh.pos)
    fh.close
  end

  return locked
end

def running_pid(lockfile)
  pid = 0

  if File.exist?(lockfile)
    pid = File.read(lockfile).strip.to_i
  end

  return pid
end

def unlock(lockfile, target_pid=nil)
  if File.exist?(lockfile)
    pid = running_pid(lockfile)

    # Don't kill yourself
    if target_pid.nil? && (pid != Process.pid)
      # Never try to kill PID < 2!
      if pid > 1
        begin
          Process.kill(9, pid)

          log_human("Force unlocked '#{pid}'")
        rescue Errno::ESRCH
          # noop: process exited while trying to kill it
        rescue => e
          log_human("Attempt to kill process '#{pid}' during unlock of '#{lockfile}' failed: #{e}")
        end

        File.delete(lockfile)
      end
    elsif target_pid == pid
      File.delete(lockfile)
    end
  end
end

def wait_and_lock(lockfile, options)
  require 'timeout'

  if File.exist?(lockfile)
    begin
      remaining_timeout = options.timeout.dup
      sleep_seconds = 2

      other_pid = running_pid(lockfile)

      Timeout::timeout(options.timeout) do
        until lock(lockfile) do
          sleep(sleep_seconds)
          remaining_timeout = remaining_timeout - sleep_seconds

          log_human([
            "Other process '#{other_pid}' from '#{lockfile}' still running.",
            "KILLING '#{other_pid}' in '#{remaining_timeout}' seconds!",
            "-- Press ^C to abort --"
          ], options)
        end
      end
    rescue Timeout::Error
      log_human("Timeout reached - KILLING '#{other_pid}'", options)

      unlock(lockfile)
    end
  end

  at_exit { unlock(lockfile, Process.pid) }

  lock(lockfile)
end

def log_err(msg, options)
  $stderr.puts Array(msg).join("\n") unless options.quiet

  log(msg, options)
end

def log_human(msg, options)
  unless options.batch
    $stdout.puts Array(msg).join("\n") unless options.quiet

    log(msg, options)
  end
end

def log(msg, options)
  msg = Array(msg)

  if options.logfile || options.syslog
    if options.logfile
      $logfile ||= File.open(options.logfile, 'a+')

      $logfile.puts(msg.join("\n"))
    end

    if options.syslog
      msg.each do |line|
        options.syslog.error(line)
      end
    end
  else
    $stdout.puts msg.join("\n") unless options.quiet
  end
end

def environment_paths
  $puppet_environments ||= %x{#{PUPPET_CMD} config print --log_level=err --section=master environmentpath}.strip.split(':')

  return Dir.glob( $puppet_environments.map{|x| Pathname.new(x).cleanpath.to_s + '/*'} )
end

def wait_for_environment_stability(timeout_seconds = 300, sleep_seconds = 10, options)
  require 'timeout'

  begin
    Timeout::timeout(timeout_seconds) do
      current_environments = environment_paths

      while current_environments != environment_paths
        sleep(sleep_seconds)

        current_environments = environment_paths
        log("Environments not yet stable, sleeping for #{sleep_seconds} seconds", options)
      end
    end
  rescue Timeout::Error
    log_err("Environments did not reach stability within timeout of #{timeout_seconds}", options)
    exit 1
  end
end

def get_target_environments(to_process, options)
  target_environments = []

  if to_process.any?{|path| path.casecmp('all') == 0}
    log('All environments specified, assuring stability...', options)

    stability_sleep = 10
    wait_for_environment_stability(options.stability_timeout, stability_sleep, options)

    target_environments = environment_paths.compact
  else
    to_process.each do |path|
      path = Pathname.new(path).cleanpath.to_s

      if environment_paths.include?(path)
        target_environments << path
      else
        if path.include?('/')
          # If we were passed an absolute path, only process items that start with that path
          tgt_env = environment_paths.find {|env_path| path.start_with?("#{env_path}/")}
        else
          # Otherwise, process all environments that specifically end with the
          # passed string
          tgt_env = environment_paths.select {|env_path| env_path.split('/').last == path}
        end

        if tgt_env
          target_environments << tgt_env
        end
      end
    end
  end

  # Convert each discovered environment into a Hash noting the path and environment name
  target_environments.flatten.sort.uniq.map{|e|
    {
      :path => e,
      :env_name => File.basename(e)
    }
  }
end

def process_paths(to_process, options)
  wait_and_lock(GENERATE_LOCK, options)

  begin
    log('Starting Puppet Type Generation', options)

    target_environments = get_target_environments(to_process, options)

    if target_environments.empty?
      msg = %{Error: Could not find target environments: '#{options.paths.join("', '")}'}

      log_err(msg, options)
      exit 1
    end

    output = []

    current_umask = File.umask(0022)

    puppet_group = %x(#{PUPPET_CMD} config print --log_level=err --section=master group).strip

    target_environments.each do |env|
      next unless File.directory?(env[:path])

      resource_types_dir = File.join(env[:path], '.resource_types')

      begin
        if options.force
          needs_regeneration = true
        else
          needs_regeneration = false

          if File.exist?(resource_types_dir)
            oldest_file = Dir.glob("#{resource_types_dir}/*").sort_by{|f| File.stat(f).mtime}.first

            if oldest_file
              oldest_file_mtime = File.stat(oldest_file).mtime

              type_files = Dir.glob("#{env[:path]}/modules/*/lib/puppet/type/**.rb")

              found_file = type_files.find do |type_file|
                if File.exist?(type_file)
                  File.stat(type_file).mtime > oldest_file_mtime
                end
              end

              needs_regeneration = true if found_file
            end
          else
            needs_regeneration = true
          end
        end

        if needs_regeneration
          log("Generating Types for #{env[:env_name]}", options)

          output += %x{#{PUPPET_CMD} generate types --log_level=err --environment #{env[:env_name]} 2>&1}.strip.lines

          # Give each environment a couple of seconds to process to reduce load on the server
          sleep(2)
        else
          output << "#{env[:env_name]} up to date"
        end
      ensure
        if File.exist?(resource_types_dir)
          require 'fileutils'

          FileUtils.chown_R(nil, puppet_group, resource_types_dir)
          FileUtils.chmod_R('g+rX,o-rwx', resource_types_dir)
        end
      end
    end

    output = output.compact.uniq.map(&:strip)
    output.select!{|x| x.include?('Error:')}

    File.umask(current_umask)

    unless output.empty?
      log_err(output, options)
      exit 2
    end
  ensure
    unlock(GENERATE_LOCK)
  end

  log('Completed Puppet Type Generation', options)
end

unless options.paths
  msg = "Error: You must pass a path"

  log_err([msg, options.help], options)

  exit 1
end

process_paths(options.paths, options)
